{"version":3,"sources":["components/Header/Header.jsx","components/Todo/Footer/Footer.jsx","components/Todo/Section/Section.jsx","components/Todo/Todo.jsx","actions/actionCreator.js","constants.js","App.js","reducers/tasks.js","store/store.js","reducers/filters.js","reducers/index.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","Option","Select","Section","props","useState","status","setStatus","id","style","color","number","textDecoration","name","value","onChange","changeStatus","type","onClick","removeTask","BUTTONS","connect","state","tasks","filters","addTask","completed","changeFilter","activeFilter","taskTest","setTaskTest","handleButtonClick","length","Date","getTime","placeholder","onKeyPress","key","target","filter","task","filterTasks","map","el","index","App","TASKS","load","namespace","PreloaderState","rootReducer","combineReducers","composeEnhancers","compose","Store","createStore","RootReaducer","applyMiddleware","save","Boolean","window","location","hostname","match","Root","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c923a94d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nconst Header = () =>(\r\n    <div className = \"head\">\r\n        <div className = 'title'>Todo-List</div>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Footer = () =>(\r\n    <div className = 'footer'>\r\n       &copy;Project by Shmaliuk Dmitriy<br />2019\r\n    </div>\r\n);\r\n\r\nexport default Footer;","import React, {useState} from 'react';\r\nimport {Button, Select } from 'antd';\r\nimport './style.css';\r\n\r\nconst {Option} = Select;\r\n\r\nconst Section = (props) =>{\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    const resetStatus = (value) =>{\r\n        setStatus((value === 'completed')?true: false);\r\n        props.changeStatus(props.id);\r\n    };\r\n\r\n    return(\r\n        <div className = 'actionSection'>\r\n            <div id = 'number' style = {{color: (status)? '#b0acac': '#000000'}}>\r\n                {(props.number+1) + '.'}\r\n            </div>\r\n\r\n            <div id='name' style = {(status)? {textDecoration:  'line-through', color: '#b0acac'} : {textDecoration: 'none', color: '#000000'}}>\r\n                {props.name}\r\n            </div>\r\n\r\n            <div id='status'>\r\n                <Select className = 'select' value = {(props.status)? 'completed': 'noCompleted'} onChange = {resetStatus}>\r\n                    <Option value= 'noCompleted'>no completed</Option>\r\n                    <Option value= 'completed'>completed</Option>\r\n                </Select>\r\n            </div>\r\n\r\n            <div id='actions'>\r\n                <Button type=\"primary\" onClick = {() => props.removeTask(props.id)}>Delete</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Section;","import React, {useState} from 'react';\r\nimport {Input, Button} from 'antd';\r\nimport {connect} from 'react-redux';\r\nimport {addTask, removeTask, changeStatus, changeFilter} from '../../actions/actionCreator';\r\nimport Footer from './Footer/Footer'; \r\nimport Section from './Section/Section';\r\nimport './style.css';\r\n\r\nconst BUTTONS = [\r\n    {\r\n        name: 'All',\r\n        id: 'all',\r\n    },\r\n    {\r\n        name: 'Completed',\r\n        id: 'completed',\r\n    },\r\n    {\r\n        name: 'No completed',\r\n        id: 'noCompleted',\r\n    }\r\n];\r\n\r\nconst Todo = (props) =>{\r\n    const [taskTest, setTaskTest] = useState('');\r\n    const handleInputChange = ({target: {value}}) =>{\r\n        setTaskTest(value);\r\n    }\r\n\r\n    const handleButtonClick = () =>{\r\n        const {addTask} = props;\r\n\r\n        if(taskTest.length > 3){\r\n            addTask(new Date().getTime(), taskTest, false);\r\n            setTaskTest('');\r\n        }\r\n    }\r\n\r\n    const filterTasks = (tasks, activeFilter) =>{\r\n        switch(activeFilter){\r\n            case 'completed':\r\n                return tasks.filter(task => task.completed);\r\n            case 'noCompleted':\r\n                return tasks.filter(task => !task.completed);\r\n            default:\r\n                return tasks;\r\n        };\r\n    };\r\n\r\n    const addTask = ({key}) =>{\r\n        if(key === 'Enter')\r\n            handleButtonClick();\r\n    }\r\n\r\n    return (\r\n        <div className = 'todo'>\r\n            <div className = 'content'>\r\n                <h2>You must do it</h2>\r\n\r\n                <div className = 'inputs'>\r\n                    <Input placeholder='Write what you must do' value = {taskTest} onKeyPress  = {addTask} onChange = {handleInputChange}/>\r\n                    <Button onClick = {handleButtonClick} type=\"primary\" className = 'addButton'>Add</Button>\r\n                </div>\r\n\r\n                <div className = 'data'>\r\n                    {filterTasks(props.tasks, props.filters).map ((el,index) => <Section number = {index} name = {el.name} status = {el.completed}\r\n                                                            removeTask = {props.removeTask} changeStatus = {props.changeStatus} \r\n                                                            id = {el.number}/>)}\r\n                </div>\r\n            </div>\r\n\r\n            <div className = 'filter'>\r\n                {BUTTONS.map(el => <p onClick = {() => props.changeFilter(el.id)}>{el.name}</p>)}\r\n            </div>\r\n            \r\n            <Footer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect (state => ({\r\n    tasks: state.tasks,\r\n    filters: state.filters,\r\n}),{addTask, changeStatus, removeTask, changeFilter})(Todo);","import {ADD_TASK, REMOVE_TASK, CHANGE_STATUS, CHANGE_FILTER} from '../constants';\r\n\r\nexport const addTask = (number, name, completed) => ({\r\n    type: ADD_TASK,\r\n    number,\r\n    name,\r\n    completed,\r\n});\r\n\r\nexport const removeTask = number =>({\r\n    type: REMOVE_TASK,\r\n    number,\r\n});\r\n\r\nexport const changeStatus = number =>({\r\n    type: CHANGE_STATUS,\r\n    number,\r\n});\r\n\r\nexport const changeFilter = activeFilter =>({\r\n    type: CHANGE_FILTER,\r\n    activeFilter,\r\n});","export const ADD_TASK = 'ADD_TASK';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\nexport const CHANGE_STATUS = 'CHANGE_STATUS';\r\nexport const CHANGE_FILTER = 'CHANGE_FILTER';","import React, {Fragment}from 'react';\r\nimport Header from './components/Header/Header';\r\nimport Todo from './components/Todo/Todo';\r\nimport './App.css';\r\n\r\nconst App = () =>(\r\n  <Fragment>\r\n    <Header />\r\n    <Todo />\r\n  </Fragment>\r\n);\r\n\r\nexport default App;\r\n","import {ADD_TASK, REMOVE_TASK, CHANGE_STATUS} from '../constants';\r\nimport {load} from 'redux-localstorage-simple';\r\n\r\nlet TASKS = load({namespace: 'todo-list'});\r\n\r\nif(!TASKS || !TASKS.tasks || !TASKS.tasks.length){\r\n     TASKS = {\r\n         tasks: []\r\n     }\r\n};\r\n\r\nconst tasks = (state = TASKS.tasks, {type, number, name, completed}) =>{\r\n    switch(type){\r\n        case ADD_TASK:\r\n            return [\r\n                ...state, {\r\n                    number: number,\r\n                    name: name,\r\n                    completed: completed,\r\n                }\r\n            ];\r\n        case REMOVE_TASK:\r\n            return [...state].filter(el => el.number !== number); \r\n        case CHANGE_STATUS:\r\n            return [...state].map(el => {\r\n                el.number === number &&\r\n                    (el.completed = !el.completed);\r\n                return el;\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default tasks;","import {createStore, compose, applyMiddleware} from 'redux';\r\nimport RootReaducer from '../reducers/index';\r\nimport {save} from 'redux-localstorage-simple';\r\n\r\nconst composeEnhancers =\r\n    process.env.NODE_ENV !== 'production' &&\r\n    typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\n\r\nconst configureStore = PreloaderState =>( \r\n    createStore(\r\n        RootReaducer,\r\n        PreloaderState,\r\n        composeEnhancers(\r\n            applyMiddleware(save({namespace: 'todo-list'}))\r\n        ),\r\n    )\r\n);\r\n\r\nconst Store = configureStore({});\r\nexport default Store;","import {CHANGE_FILTER} from '../constants';\r\n\r\nconst BASE_FILTER = 'all';\r\n\r\nconst filters = (state = BASE_FILTER, {type, activeFilter}) =>{\r\n    switch (type){\r\n        case CHANGE_FILTER:\r\n            return activeFilter;\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport default filters;","import {combineReducers} from 'redux';\r\nimport tasks from './tasks';\r\nimport filters from './filters';\r\n\r\nconst rootReducer = combineReducers({tasks, filters});\r\n\r\nexport default rootReducer;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport Store from './store/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst Root = (\r\n    <Provider store = {Store}>\r\n        <App />\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(Root, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}