{"version":3,"sources":["store/store.js","components/Header/Header.jsx","components/Todo/Footer/Footer.jsx","components/Todo/Section/Section.jsx","components/Todo/Todo.jsx","actions/actionCreator.js","constants.js","App.js","reducers/tasks.js","reducers/index.js","serviceWorker.js","index.js"],"names":["PreloaderState","Header","className","Footer","Option","Select","Section","number","name","useState","status","setStatus","id","style","textDecoration","width","defaultValue","onChange","value","type","connect","state","tasks","addTask","props","taskTest","setTaskTest","handleButtonClick","length","placeholder","onKeyPress","key","target","onClick","map","el","App","rootReducer","combineReducers","Store","createStore","RootReaducer","Boolean","window","location","hostname","match","Root","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAGuBA,E,gCCMRC,G,OANA,kBACX,yBAAKC,UAAY,QACb,yBAAKA,UAAY,SAAjB,gB,iCCIOC,G,OANA,kBACX,yBAAKD,UAAY,UAAjB,kCACoC,6BADpC,U,SCAGE,G,OAAUC,IAAVD,QAiCQE,EA/BC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,OAAOC,EAAS,EAATA,KAAS,EACFC,oBAAS,GADP,mBACvBC,EADuB,KACfC,EADe,KAO9B,OACI,yBAAKT,UAAY,iBACb,yBAAKU,GAAK,UACLL,EAAS,KAGd,yBAAKK,GAAG,OAAOC,MAAS,CAACC,eAAiBJ,EAAS,eAAiB,SAC/DF,GAGL,yBAAKI,GAAG,UACJ,kBAAC,IAAD,CAAQC,MAAS,CAACE,MAAO,KAAMC,aAAe,gBAAgBC,SAftD,SAACC,GACjBP,EAAqB,cAAVO,KAeC,kBAACd,EAAD,CAAQc,MAAO,aAAf,aACA,kBAACd,EAAD,CAAQc,MAAO,gBAAf,mBAIR,yBAAKN,GAAG,WACJ,kBAAC,IAAD,CAAQO,KAAK,WAAb,aCcDC,G,OAAAA,aAAS,SAAAC,GAAK,MAAK,CAC9BC,MAAOD,EAAMC,SACd,CAACC,QC7CmB,SAAChB,EAAQC,GAAT,MAAmB,CACtCW,KCHoB,WDIpBZ,SACAC,UDwCWY,EArCF,SAACI,GAAU,IAAD,EACaf,mBAAS,IADtB,mBACZgB,EADY,KACFC,EADE,KAMbC,EAAoB,YAEtBJ,EADkBC,EAAXD,SACCC,EAAMF,MAAMM,OAAO,EAAGH,GAC9BC,EAAY,KAUhB,OACI,yBAAKxB,UAAY,QACb,8CAEA,yBAAKA,UAAY,UACb,kBAAC,IAAD,CAAOU,GAAG,WAAWiB,YAAY,yBAAyBC,WAZtD,SAAC,GAAU,IAATC,EAAQ,EAARA,IACXN,EAASG,OAAS,GAAa,UAARG,GACtBJ,KAUsFV,SAtBpE,SAAC,GAAsB,IAAZC,EAAW,EAApBc,OAASd,MACjCQ,EAAYR,MAsBJ,kBAAC,IAAD,CAAQe,QAAWN,EAAmBR,KAAK,UAAUjB,UAAY,aAAjE,QAGJ,yBAAKA,UAAY,QACZsB,EAAMF,MAAMY,KAAK,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAS5B,OAAU4B,EAAG5B,OAAQC,KAAQ2B,EAAG3B,WAGrE,kBAAC,EAAD,WG5BG4B,G,OAPH,kBACV,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,S,iBCQWd,EAdD,WAAsC,IAArCD,EAAoC,uDAA5B,GAA4B,yCAAvBF,EAAuB,EAAvBA,KAAMZ,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,KACtC,OAAOW,GACH,IFJgB,WEKZ,MAAM,GAAN,mBACOE,GADP,CACc,CACNd,OAAQA,EACRC,KAAMA,KAGlB,QACI,OAAOa,ICPJgB,EAFKC,YAAgB,CAAChB,UTQtBiB,GARQvC,EAOM,GANzBwC,YACIC,EACAzC,IUMY0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EACF,kBAAC,IAAD,CAAUC,MAAST,GACf,kBAAC,EAAD,OAIRU,IAASC,OAAOH,EAAMI,SAASC,eAAe,SDoHxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6b144e40.chunk.js","sourcesContent":["import {createStore} from 'redux';\r\nimport RootReaducer from '../reducers/index';\r\n\r\nconst configureStore = PreloaderState =>(\r\n    createStore(\r\n        RootReaducer,\r\n        PreloaderState,\r\n    )\r\n);\r\n\r\nconst Store = configureStore({});\r\nexport default Store;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Header = () =>(\r\n    <div className = \"head\">\r\n        <div className = 'title'>Todo-List</div>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Footer = () =>(\r\n    <div className = 'footer'>\r\n       &copy;Project by Shmaliuk Dmitriy<br />2019\r\n    </div>\r\n);\r\n\r\nexport default Footer;","import React, {useState}from 'react';\r\nimport {Button, Select } from 'antd';\r\nimport './style.css';\r\n\r\nconst {Option} = Select;\r\n\r\nconst Section = ({number,name}) =>{\r\n    const [status, setStatus] = useState(false);\r\n\r\n    const resetStatus = (value) =>{\r\n        setStatus((value === 'completed')?true: false);\r\n    }\r\n\r\n    return(\r\n        <div className = 'actionSection'>\r\n            <div id = 'number'>\r\n                {number + '.'}\r\n            </div>\r\n\r\n            <div id='name' style = {{textDecoration: (status)? 'line-through' : 'none'}}>\r\n                {name}\r\n            </div>\r\n\r\n            <div id='status'>\r\n                <Select style = {{width: 150}} defaultValue = 'not completed' onChange = {resetStatus}>\r\n                    <Option value= 'completed'>completed</Option>\r\n                    <Option value= 'notCompleted'>not completed</Option>\r\n                </Select>\r\n            </div>\r\n\r\n            <div id='actions'>\r\n                <Button type=\"primary\">Delete</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Section;","import React, {useState} from 'react';\r\nimport {Input, Button} from 'antd';\r\nimport {connect} from 'react-redux';\r\nimport {addTask} from '../../actions/actionCreator';\r\nimport Footer from './Footer/Footer'; \r\nimport Section from './Section/Section';\r\nimport './style.css';\r\n\r\nconst Todo = (props) =>{\r\n    const [taskTest, setTaskTest] = useState('');\r\n    const handleInputChange = ({target: {value}}) =>{\r\n        setTaskTest(value);\r\n    }\r\n\r\n    const handleButtonClick = () =>{\r\n        const {addTask} = props ;\r\n        addTask(props.tasks.length+1, taskTest);\r\n        setTaskTest('');\r\n    }\r\n\r\n    const addTask = ({key}) =>{\r\n        if(taskTest.length > 3 && key === 'Enter'){\r\n            handleButtonClick();\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className = 'todo'>\r\n            <h2>You must do it</h2>\r\n\r\n            <div className = 'inputs'>\r\n                <Input id='addInput' placeholder='Write what you must do' onKeyPress  = {addTask} onChange = {handleInputChange}/>\r\n                <Button onClick = {handleButtonClick} type=\"primary\" className = 'addButton'>Add</Button>\r\n            </div>\r\n\r\n            <div className = 'data'>\r\n                {props.tasks.map (el => <Section number = {el.number} name = {el.name}/>)}\r\n            </div>\r\n\r\n            <Footer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect (state => ({\r\n    tasks: state.tasks,\r\n}),{addTask})(Todo);","import {ADD_TASK} from '../constants';\r\n\r\nexport const addTask = (number, name) => ({\r\n    type: ADD_TASK,\r\n    number,\r\n    name,\r\n});","export const ADD_TASK = 'ADD_TASK';","import React, {Fragment}from 'react';\r\nimport Header from './components/Header/Header';\r\nimport Todo from './components/Todo/Todo';\r\nimport './App.css';\r\n\r\nconst App = () =>(\r\n  <Fragment>\r\n    <Header />\r\n    <Todo />\r\n  </Fragment>\r\n);\r\n\r\nexport default App;\r\n","import {ADD_TASK} from '../constants';\r\n\r\nconst tasks = (state = [], {type, number, name}) =>{\r\n    switch(type){\r\n        case ADD_TASK:\r\n            return [\r\n                ...state, {\r\n                    number: number,\r\n                    name: name,\r\n                }\r\n            ];\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default tasks;","import {combineReducers} from 'redux';\r\nimport tasks from './tasks';\r\n\r\nconst rootReducer = combineReducers({tasks});\r\n\r\nexport default rootReducer;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport Store from './store/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst Root = (\r\n    <Provider store = {Store}>\r\n        <App />\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(Root, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}